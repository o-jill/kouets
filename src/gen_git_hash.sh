#!/bin/sh

# script to generate kouetshash.cpp/.h

helpmsg()
{
 echo "-- gen_git_hash.sh --"
 echo "usage:
  $gen_git_hash.sh [TYPE] filename"
 echo "TYPE:
  H   create header file.
      (it does not contain hash value. only declaration.)
  C   create c source file.
  CC  create cc source file.
  CPP create cpp source file.
"
 echo "example:
  gen_git_hash H myhash
    myhash.h will be created.
  gen_git_hash C myhash
    myhash.c will be created.
  gen_git_hash CC myhash
    myhash.cc will be created.
  gen_git_hash CPP myhash
    myhash.cpp will be created."
}

header()
{
echo "/**
 * this file was generated by gen_git_hash.sh.
 */

#ifndef __GIT_HASH_${1}_H_
#define __GIT_HASH_${1}_H_

#define GIT_COMMIT_HASH_TEXT(a) #a
extern const char* branchname;
extern const char* commithash;
#endif  // __GIT_HASH_${1}_H_" > ${1}.h
}

source_c()
{
echo "#include \"${1}.h\"
const char* branchname = GIT_COMMIT_HASH_TEXT("> $1.c

git rev-parse --abbrev-ref HEAD >> $1.c

echo ");

const char* commithash = GIT_COMMIT_HASH_TEXT(">> $1.c

git rev-parse --short HEAD >> $1.c

echo ");" >> $1.c
}

source_cc()
{
echo "#include \"${1}.h\"

const char* branchname = GIT_COMMIT_HASH_TEXT("> $1.cc

git rev-parse --abbrev-ref HEAD >> $1.cc

echo ");

const char* commithash = GIT_COMMIT_HASH_TEXT(">> $1.cc

git rev-parse --short HEAD >> $1.cc

echo ");" >> $1.cc
}

source_cpp()
{
echo "#include \"${1}.h\"

const char* branchname = GIT_COMMIT_HASH_TEXT("> $1.cpp

git rev-parse --abbrev-ref HEAD >> $1.cpp

echo ");

const char* commithash = GIT_COMMIT_HASH_TEXT(">> $1.cpp

git rev-parse --short HEAD >> $1.cpp

echo ");" >> $1.cpp
}

if [ "$1" = "H" ];
then
 header $2
elif [ "$1" = "C" ];
then
 source_c $2
elif [ "$1" = "CC" ];
then
 sorce_cc $2
elif [ "$1" = "CPP" ];
then
 source_cpp $2
else
 helpmsg
fi
